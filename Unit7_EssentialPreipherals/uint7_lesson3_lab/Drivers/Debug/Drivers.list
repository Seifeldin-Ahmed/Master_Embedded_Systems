
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004e8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018f4  00000000  00000000  00010511  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003d3  00000000  00000000  00011e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000126e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b0a  00000000  00000000  00012780  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000ce1  00000000  00000000  0001428a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007652  00000000  00000000  00014f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c5bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004c8 	.word	0x080004c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004c8 	.word	0x080004c8

08000170 <Get_CRLH_Position>:
 * */
#include "Stm32_F103C6_gpio_driver.h"


static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0:  return 0;   break;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1:  return 4;   break;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2:  return 8;   break;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3:  return 12;  break;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4:  return 16;  break;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5:  return 20;  break;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6:  return 24;  break;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7:  return 28;  break;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8:  return 0;   break;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9:  return 4;   break;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;   break;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12;  break;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16;  break;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20;  break;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24;  break;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28;  break;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>
	}
	 return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_Init>:
* @retval		 - none
* Note			 - Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
* 				   but LQFP48 Package has only GPIO A,B, PART of C,D exported as external PINS from the MCU
*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	/* Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	 * Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15 */
	volatile uint32_t* ConfigRegister = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2bff      	cmp	r3, #255	; 0xff
 800024a:	d801      	bhi.n	8000250 <MCAL_GPIO_Init+0x1a>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	e001      	b.n	8000254 <MCAL_GPIO_Init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3304      	adds	r3, #4
 8000254:	60fb      	str	r3, [r7, #12]

	/* Clear CNF[1:0] MODE[1:0] */
	(*ConfigRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff88 	bl	8000170 <Get_CRLH_Position>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	230f      	movs	r3, #15
 8000266:	4093      	lsls	r3, r2
 8000268:	43da      	mvns	r2, r3
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	401a      	ands	r2, r3
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	601a      	str	r2, [r3, #0]

	// if Pin is output, MODE > 0:
	if(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP || GPIO_MODE_AF_OUTPUT_OD || GPIO_MODE_AF_OUTPUT_PP)
	{
		(*ConfigRegister) |= ( (((PinConfig->GPIO_Mode - 4)<< 2 ) | (PinConfig->GPIO_Output_Speed) ) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	789b      	ldrb	r3, [r3, #2]
 8000278:	3b04      	subs	r3, #4
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	78d2      	ldrb	r2, [r2, #3]
 8000280:	ea43 0402 	orr.w	r4, r3, r2
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff71 	bl	8000170 <Get_CRLH_Position>
 800028e:	4603      	mov	r3, r0
 8000290:	fa04 f203 	lsl.w	r2, r4, r3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	431a      	orrs	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
			}
		}
	}
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd90      	pop	{r4, r7, pc}

080002a6 <MCAL_GPIO_ReadPin>:
* @param[in]	 - PinNumber: Set Pin Number according @ref GPIO_PINS_define
* @retval		 - the input pin value (two values based on @ref GPIO_PIN_state)
* Note			 - none
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b083      	sub	sp, #12
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
 80002ae:	460b      	mov	r3, r1
 80002b0:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	887b      	ldrh	r3, [r7, #2]
 80002b8:	4013      	ands	r3, r2
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MCAL_GPIO_ReadPin+0x1c>
	{
		return GPIO_PIN_SET;
 80002be:	2301      	movs	r3, #1
 80002c0:	e000      	b.n	80002c4 <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return GPIO_PIN_RESET;
 80002c2:	2300      	movs	r3, #0
	}
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr

080002ce <MCAL_GPIO_TogglePin>:
* @param[in]	 - PinNumber: Set Pin Number according @ref GPIO_PINS_define
* @retval		 - none
* Note			 - none
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
 80002d6:	460b      	mov	r3, r1
 80002d8:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)PinNumber;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68da      	ldr	r2, [r3, #12]
 80002de:	887b      	ldrh	r3, [r7, #2]
 80002e0:	405a      	eors	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	60da      	str	r2, [r3, #12]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <clock_init>:
#include "stm32f103x6.h"



void clock_init()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	// INIT CLOCK FOR GPIOA
	RCC_GPIOA_CLK_EN();
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <clock_init+0x24>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <clock_init+0x24>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]

	// INIT CLOCK FOR GPIOB
	RCC_GPIOB_CLK_EN();
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <clock_init+0x24>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a03      	ldr	r2, [pc, #12]	; (8000314 <clock_init+0x24>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <GPIO_init>:
void GPIO_init()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	//PA1: input floating
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800031e:	2302      	movs	r3, #2
 8000320:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000322:	2301      	movs	r3, #1
 8000324:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	4819      	ldr	r0, [pc, #100]	; (8000390 <GPIO_init+0x78>)
 800032c:	f7ff ff83 	bl	8000236 <MCAL_GPIO_Init>

	//PB1: output PUSH PULL
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000330:	2302      	movs	r3, #2
 8000332:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	2304      	movs	r3, #4
 8000336:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000338:	2301      	movs	r3, #1
 800033a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4619      	mov	r1, r3
 8000340:	4814      	ldr	r0, [pc, #80]	; (8000394 <GPIO_init+0x7c>)
 8000342:	f7ff ff78 	bl	8000236 <MCAL_GPIO_Init>

	//PB1: output PUSH PULL
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000346:	2302      	movs	r3, #2
 8000348:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2304      	movs	r3, #4
 800034c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800034e:	2301      	movs	r3, #1
 8000350:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <GPIO_init+0x7c>)
 8000358:	f7ff ff6d 	bl	8000236 <MCAL_GPIO_Init>

	//PA13: input floating
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800035c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000360:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000362:	2301      	movs	r3, #1
 8000364:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4809      	ldr	r0, [pc, #36]	; (8000390 <GPIO_init+0x78>)
 800036c:	f7ff ff63 	bl	8000236 <MCAL_GPIO_Init>

	//PB13: output PUSH PULL
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000374:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2304      	movs	r3, #4
 8000378:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800037a:	2301      	movs	r3, #1
 800037c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4804      	ldr	r0, [pc, #16]	; (8000394 <GPIO_init+0x7c>)
 8000384:	f7ff ff57 	bl	8000236 <MCAL_GPIO_Init>

}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010800 	.word	0x40010800
 8000394:	40010c00 	.word	0x40010c00

08000398 <wait>:

void wait(int x){
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	unsigned int i , j;
	for(i=0 ; i < x ; i++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	e00b      	b.n	80003be <wait+0x26>
		for(j=0; j < 255 ; j++);
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	e002      	b.n	80003b2 <wait+0x1a>
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	3301      	adds	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	2bfe      	cmp	r3, #254	; 0xfe
 80003b6:	d9f9      	bls.n	80003ac <wait+0x14>
	for(i=0 ; i < x ; i++)
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3301      	adds	r3, #1
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3ef      	bcc.n	80003a6 <wait+0xe>
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <main>:
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	clock_init();
 80003d4:	f7ff ff8c 	bl	80002f0 <clock_init>
	GPIO_init();
 80003d8:	f7ff ff9e 	bl	8000318 <GPIO_init>

	while(1){
       //PA1 >>> Connected by external PUR
	   if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ) // single press
 80003dc:	2102      	movs	r1, #2
 80003de:	4811      	ldr	r0, [pc, #68]	; (8000424 <main+0x54>)
 80003e0:	f7ff ff61 	bl	80002a6 <MCAL_GPIO_ReadPin>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d10b      	bne.n	8000402 <main+0x32>
	   {
		    MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80003ea:	2102      	movs	r1, #2
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <main+0x58>)
 80003ee:	f7ff ff6e 	bl	80002ce <MCAL_GPIO_TogglePin>
			while( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 );
 80003f2:	bf00      	nop
 80003f4:	2102      	movs	r1, #2
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <main+0x54>)
 80003f8:	f7ff ff55 	bl	80002a6 <MCAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f8      	beq.n	80003f4 <main+0x24>
	   }
       //PA13 >>> Connected by external PDR
	   if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1 ) // Multi press
 8000402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <main+0x54>)
 8000408:	f7ff ff4d 	bl	80002a6 <MCAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b01      	cmp	r3, #1
 8000410:	d104      	bne.n	800041c <main+0x4c>
	   {
		    MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <main+0x58>)
 8000418:	f7ff ff59 	bl	80002ce <MCAL_GPIO_TogglePin>
	   }
	   wait(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f7ff ffbb 	bl	8000398 <wait>
	   if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ) // single press
 8000422:	e7db      	b.n	80003dc <main+0xc>
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000430:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopForever+0xe>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045a:	f000 f811 	bl	8000480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff ffb7 	bl	80003d0 <main>

08000462 <LoopForever>:

LoopForever:
    b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   r0, =_estack
 8000464:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000470:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 8000474:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000478:	2000001c 	.word	0x2000001c

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	2500      	movs	r5, #0
 8000484:	4e0c      	ldr	r6, [pc, #48]	; (80004b8 <__libc_init_array+0x38>)
 8000486:	4c0d      	ldr	r4, [pc, #52]	; (80004bc <__libc_init_array+0x3c>)
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	42a5      	cmp	r5, r4
 800048e:	d109      	bne.n	80004a4 <__libc_init_array+0x24>
 8000490:	f000 f81a 	bl	80004c8 <_init>
 8000494:	2500      	movs	r5, #0
 8000496:	4e0a      	ldr	r6, [pc, #40]	; (80004c0 <__libc_init_array+0x40>)
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <__libc_init_array+0x44>)
 800049a:	1ba4      	subs	r4, r4, r6
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	42a5      	cmp	r5, r4
 80004a0:	d105      	bne.n	80004ae <__libc_init_array+0x2e>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004a8:	4798      	blx	r3
 80004aa:	3501      	adds	r5, #1
 80004ac:	e7ee      	b.n	800048c <__libc_init_array+0xc>
 80004ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004b2:	4798      	blx	r3
 80004b4:	3501      	adds	r5, #1
 80004b6:	e7f2      	b.n	800049e <__libc_init_array+0x1e>
 80004b8:	080004e0 	.word	0x080004e0
 80004bc:	080004e0 	.word	0x080004e0
 80004c0:	080004e0 	.word	0x080004e0
 80004c4:	080004e4 	.word	0x080004e4

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
